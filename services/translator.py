import aiohttp
import os
import html
import re

DEEPL_API_KEY = os.getenv("DEEPL_API_KEY")

SUPPORTED_LANGUAGES = {"EN", "DE", "FR", "ES", "RU", "IT", "NL", "PL", "PT", "JA", "ZH"}

def prepare_text_for_translation(text):
    """–ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –Ω–∞ <br>, —á—Ç–æ–±—ã DeepL —Å–æ—Ö—Ä–∞–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    text = text.replace("\n", "<br>")  # Telegram –∏—Å–ø–æ–ª—å–∑—É–µ—Ç \n, –∞ DeepL –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å <br>
    return text

def restore_line_breaks(text):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å—Ç—É–ø—ã –∏ –∞–±–∑–∞—Ü—ã –≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ."""
    text = re.sub(r'\s*<br\s*/?>\s*', '\n', text)  # –ó–∞–º–µ–Ω—è–µ–º <br> –Ω–∞ \n
    text = re.sub(r'\s*</?(p|div)>\s*', '\n\n', text)  # <p> –∏ <div> –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –∞–±–∑–∞—Ü—ã
    text = re.sub(r'\n{3,}', '\n\n', text)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    return text.strip()

async def deepL_translate(text, target_lang):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ DeepL API –∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è HTML-—Ä–∞–∑–º–µ—Ç–∫—É –∏ –æ—Ç—Å—Ç—É–ø—ã."""
    url = "https://api-free.deepl.com/v2/translate"
    
    headers = {"Authorization": f"DeepL-Auth-Key {DEEPL_API_KEY}"}
    prepared_text = prepare_text_for_translation(text)  # –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ <br>
    
    data = {
        "text": prepared_text,
        "target_lang": target_lang.upper(),
        "tag_handling": "html",  # –°–æ–æ–±—â–∞–µ–º DeepL, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML
        "ignore_tags": "b, i, u, s, code, pre, a",  # –¢–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å
        "preserve_formatting": "1",  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –æ—Ç—Å—Ç—É–ø—ã
        "split_sentences": "nonewlines",  # –ù–µ —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        "formality": "default"
    }

    print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DeepL ({target_lang}): {html.escape(prepared_text)}")

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(url, headers=headers, data=data) as response:
                result = await response.json()
                if response.status == 200 and "translations" in result:
                    translated_text = result["translations"][0]["text"]
                    translated_text = restore_line_breaks(translated_text)  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
                    print(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ ({target_lang}): {html.escape(translated_text)}")
                    return translated_text
                else:
                    print(f"‚ö† –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ({target_lang}): {result}")
                    return f"‚ö† –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ({target_lang})"
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ API ({target_lang}): {e}")
            return f"‚ö† –û—à–∏–±–∫–∞ API ({target_lang})"

async def translate_text(text: str, target_lang: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ DeepL API, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç—Å—Ç—É–ø—ã."""
    
    if target_lang.upper() not in SUPPORTED_LANGUAGES:
        return f"‚ö† –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {target_lang.upper()}"

    translated_text = await deepL_translate(text, target_lang)
    return translated_text
