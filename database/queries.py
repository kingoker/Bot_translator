import asyncio
import traceback
from sqlalchemy import BigInteger, cast
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.exc import DBAPIError, SQLAlchemyError
from sqlalchemy.future import select
from sqlalchemy.sql.expression import delete
from database.models import Channel, Settings, Statistics, User


# ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id
async def orm_get_user_by_channel(session: AsyncSession, chat_id: int):
    result = await session.execute(
        select(User).join(Channel, User.user_id == Channel.user_id).where(Channel.chat_id == chat_id).limit(1)
    )
    return result.scalar_one_or_none()


# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
async def orm_add_user(session: AsyncSession, user_id: int, username: str, phone_number: str, is_admin: bool):
    new_user = User(user_id=user_id, username=username, phone_number=phone_number, is_admin=is_admin)
    session.add(new_user)
    await session.commit()



# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id
async def orm_get_user(session: AsyncSession, user_id: int):
    result = await session.execute(
        select(User).where(User.user_id == user_id)
    )
    return result.scalar()  # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç User –∏–ª–∏ None



# –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def orm_set_admin(session: AsyncSession, user_id: int):
    result = await session.execute(select(User).where(User.user_id == user_id))
    user = result.scalars().first()

    if user:
        user.is_admin = True
        await session.commit()
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        return True
    else:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
        return False
    
    
# ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
async def orm_get_admins(session: AsyncSession):
    result = await session.execute(
        select(User.user_id).filter(User.is_admin == True)  # ‚úÖ –ë—ã–ª–æ: select(User) ‚Üí select(User.user_id)
    )
    return [row[0] for row in result.fetchall()]





# ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
async def orm_add_channel(session: AsyncSession, user_id: int, chat_id: int, name: str, language: str):
    try:
        print(f"üîç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: user_id={user_id}, chat_id={chat_id}, name={name}, language={language}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–Ω–∞–ª –≤ –±–∞–∑–µ
        result = await session.execute(
            select(Channel).where(Channel.user_id == user_id, Channel.chat_id == chat_id)
        )
        existing_channel = result.scalar_one_or_none()

        if existing_channel:
            print(f"‚ùå –ö–∞–Ω–∞–ª {chat_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É user_id {user_id}")
            return False

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
        new_channel = Channel(user_id=user_id, chat_id=chat_id, name=name, language=language)
        session.add(new_channel)
        print("üìå –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–µ—Å—Å–∏—é, –≥–æ—Ç–æ–≤–∏–º commit()...")

        await session.commit()  # üî• –ó–¥–µ—Å—å –º–æ–≥–ª–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        print(f"‚úÖ –ö–∞–Ω–∞–ª {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
        return True

    except SQLAlchemyError as e:
        await session.rollback()
        print(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        return False


# –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ –ë–î
async def orm_delete_channel(session: AsyncSession, chat_id):
    try:
        chat_id = int(chat_id)  # ‚úÖ –ü—Ä–∏–≤–æ–¥–∏–º `chat_id` –∫ `int`
        result = await session.execute(
            select(Channel).where(Channel.chat_id == chat_id)
        )
        channel = result.scalar_one_or_none()

        if channel:
            await session.delete(channel)
            await session.commit()
            print(f"‚úÖ –ö–∞–Ω–∞–ª {chat_id} —É–¥–∞–ª–µ–Ω")
            return True
        else:
            print(f"‚ö† –ö–∞–Ω–∞–ª {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return False

    except Exception as e:
        await session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        return False



# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î
async def orm_get_all_channels(session, user_id: int):
    
    result = await session.execute(
        select(Channel).where(Channel.user_id == user_id)
    )
    
    return result.scalars().all()













###########     –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥)      ###########

# ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
async def orm_get_setting(session: AsyncSession, key: str, user_id: int = None):
    if user_id:
        result = await session.execute(
            select(Settings.value).where(Settings.user_id == user_id, Settings.key == key)
        )
    else:
        result = await session.execute(
            select(Settings.value).where(Settings.key == key)  # üìå –ò—â–µ–º –±–µ–∑ user_id
        )

    setting = result.scalar()

    if setting is None:
        print(f"‚ö† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.")
        return None, None

    return setting, key





# ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
async def orm_set_setting(session: AsyncSession, key: str, value: str, user_id: int):
    existing_setting = await session.execute(
        select(Settings).where(Settings.key == key, Settings.user_id == user_id)
    )
    setting = existing_setting.scalars().first()

    if setting:
        setting.value = value  # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    else:
        new_setting = Settings(key=key, value=value, user_id=user_id)  # ‚úÖ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        session.add(new_setting)

    await session.commit()





###########     –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞      ###########

# ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
async def orm_get_statistics(session: AsyncSession, user_id: int):
    result = await session.execute(select(Statistics).where(Statistics.user_id == user_id))
    stat = result.scalars().first()

    if not stat:  # ‚úÖ –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ—ë
        stat = Statistics(user_id=user_id, messages_sent=0, words_translated=0, characters_translated=0)
        session.add(stat)
        await session.commit()

    return {
        "translated_messages": stat.messages_sent,
        "total_words": stat.words_translated,
        "total_characters": stat.characters_translated
    }





# ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏)
async def orm_update_statistics(session: AsyncSession, user_id: int, text: str = None):
    try:
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è user_id={user_id}")

        # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        result = await session.execute(select(Statistics).where(Statistics.user_id == user_id))
        stat = result.scalars().first()

        word_count = len(text.split()) if text else 0  # üî• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        char_count = len(text) if text else 0  # üî• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤

        if stat:
            print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è user_id={user_id}")
            stat.messages_sent += 1
            stat.words_translated += word_count
            stat.characters_translated += char_count
        else:
            print(f"üÜï –°–æ–∑–¥–∞—ë–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è user_id={user_id}")
            stat = Statistics(
                user_id=user_id,
                messages_sent=1,
                words_translated=word_count,
                characters_translated=char_count
            )
            session.add(stat)

        await session.flush()  # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
        await session.commit()  # ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç

        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è user_id={user_id}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        traceback.print_exc()
        await session.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏