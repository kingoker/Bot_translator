import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InputMediaPhoto
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from database.queries import orm_add_user, orm_get_admins, orm_get_user, orm_set_admin
from keyboards.admin import get_back_button, get_main_menu, register_menu, admin_subscription_menu, become_admin_button
from utils.utils import get_valid_file

router = Router()

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üìå –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationState(StatesGroup):
    waiting_for_phone = State()




################## /START + –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ##################  

@router.message(Command("start"))
async def start_command(message: types.Message, session: AsyncSession):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await orm_get_user(session, user_id)

    if user:
        # ‚úÖ –ï—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
        return

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–Ω–Ω–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    banner = get_valid_file("media/register_banner.jpg")
    if banner:
        await message.answer_photo(
            photo=banner,
            caption="üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
            reply_markup=register_menu()
        )
    else:
        await message.answer("üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.", reply_markup=register_menu())

# ‚úÖ –ö–Ω–æ–ø–∫–∞ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
@router.callback_query(F.data == "register_user")
async def register_user(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(RegistrationState.waiting_for_phone)

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await callback.message.answer("üì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=keyboard)


# ‚úÖ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(RegistrationState.waiting_for_phone, F.contact)
async def get_phone_number(message: types.Message, state: FSMContext, session: AsyncSession):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    phone_number = message.contact.phone_number

    # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await orm_add_user(session, user_id, username, phone_number, is_admin=False)

    await message.answer(f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\nüìå –í–∞—à –Ω–æ–º–µ—Ä: {phone_number}", reply_markup=types.ReplyKeyboardRemove())

    # ‚úÖ –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    await message.answer(
        "üöÄ –•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º?",
        reply_markup=become_admin_button()
    )

    await state.clear()




################## –°–¢–ê–¢–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú ##################  

@router.callback_query(F.data == "become_admin")
async def become_admin(callback: types.CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await orm_get_user(session, user_id)
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admins = await orm_get_admins(session)

    if len(admins) < 15:
        # ‚úÖ –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        await orm_set_admin(session, user_id)
        await session.commit()
        await callback.message.answer("‚úÖ –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
    else:
        # ‚úÖ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        banner = get_valid_file("media/admin_subscription.jpg")
        if banner:
            await callback.message.answer_photo(
                photo=banner,
                caption="üî• –í—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã!\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ <b>$10/–º–µ—Å—è—Ü</b>.",
                reply_markup=admin_subscription_menu()
            )
        else:
            await callback.message.answer(
                "üî• –í—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã!\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ <b>$10/–º–µ—Å—è—Ü</b>.",
                reply_markup=admin_subscription_menu()
            )

################## –ü–†–û–ß–ï–ï ##################  
@router.callback_query(F.data == "about_bot")
async def about_bot(callback: types.CallbackQuery):
    await callback.answer()

    banner = get_valid_file("media/about_bot_banner.jpg")
    if not banner:
        await callback.answer("‚ùå –§–∞–π–ª 'about_bot_banner.jpg' –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    description = (
        "ü§ñ **–û –±–æ—Ç–µ**\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–∞—Ö, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–µ–¥–∏–∞.\n\n"
        "üîπ **–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª?**\n"
        "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n"
        "2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–∞–Ω–∞–ª—ã –≤ –±–æ—Ç —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.\n"
        "3Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.\n"
        "5Ô∏è‚É£ –î–∞–π—Ç–µ –µ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —á–∏—Ç–∞—Ç—å –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "6Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –Ω–∞—á–Ω—ë—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! üîÑ"
    )

    await callback.message.edit_media(
        media=InputMediaPhoto(media=banner, caption=description, parse_mode="Markdown"),
        reply_markup=get_back_button()
    )




# ‚úÖ –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == "go_back")
async def go_back(callback: types.CallbackQuery):
    await callback.answer()
    
    banner = get_valid_file("media/main_banner.jpg")
    if not banner:
        await callback.answer("‚ùå –§–∞–π–ª 'main_banner.jpg' –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    await callback.message.edit_media(
        media=InputMediaPhoto(media=banner, caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
        reply_markup=get_main_menu()
    )
