import os
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from database.models import Channel, Settings
from database.queries import orm_add_channel, orm_delete_channel, orm_get_admins, orm_get_all_channels, orm_get_statistics, orm_get_user, orm_set_setting
from sqlalchemy.ext.asyncio import AsyncSession
from utils.utils import get_valid_file

from keyboards.admin import get_admin_menu, get_back_button, get_settings_keyboard


router = Router()



AUTO_TRANSLATE_STATE = False  # ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞



# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(Command("admin"))
async def admin_command(message: types.Message):
    if message.from_user.id not in orm_get_admins():
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º.")
        return

    await message.answer("üìå –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏:", reply_markup=get_admin_menu())




# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(F.data == "admin_panel")
async def handle_admin_buttons(callback: types.CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î
    admin_ids = await orm_get_admins(session)

    if user_id in admin_ids:
        admin_banner = get_valid_file("media/admin_banner.jpg")
        if not admin_banner:
            await callback.answer("‚ùå –§–∞–π–ª 'admin_banner.jpg' –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å.", show_alert=True)
            return

        await callback.message.edit_media(
            media=InputMediaPhoto(media=admin_banner, caption="üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
            reply_markup=get_admin_menu()
        )
    else:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", show_alert=True)


# ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥"
@router.callback_query(F.data == "toggle_auto_translate")
async def toggle_auto_translate(callback: types.CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º user_id

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞
    result = await session.execute(
        select(Settings.value).where(Settings.user_id == user_id, Settings.key == "AUTO_TRANSLATE_ENABLED")
    )
    current_status = result.scalar()

    # ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    new_status = "0" if current_status == "1" else "1"

    # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    await orm_set_setting(session, "AUTO_TRANSLATE_ENABLED", new_status, user_id)

    # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await callback.message.edit_text(
        "‚öô <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä:",
        reply_markup=await get_settings_keyboard(session, user_id)
    )

    await callback.answer(f"üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ {'–≤–∫–ª—é—á–µ–Ω' if new_status == '1' else '–≤—ã–∫–ª—é—á–µ–Ω'}!")




# ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
@router.callback_query(F.data == "settings")
async def admin_settings(callback: types.CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = await get_settings_keyboard(session, user_id)

    await callback.message.answer("‚öô <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä:", reply_markup=keyboard)


# ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞
@router.callback_query(F.data == "toggle_autotranslate")
async def toggle_autotranslate(callback: types.CallbackQuery):
    global AUTO_TRANSLATE_STATE
    AUTO_TRANSLATE_STATE = not AUTO_TRANSLATE_STATE  # üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await callback.message.edit_reply_markup(
        reply_markup=get_settings_keyboard(AUTO_TRANSLATE_STATE)
    )

    await callback.answer(
        "‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –≤–∫–ª—é—á—ë–Ω!" if AUTO_TRANSLATE_STATE else "‚ùå –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω!",
        show_alert=True
    )


# ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@router.callback_query(F.data == "statistics")
async def admin_stats(callback: types.CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É

    # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª
    main_channel_result = await session.execute(select(Settings.value).where(
        Settings.user_id == user_id, Settings.key == "MAIN_CHANNEL_ID"
    ))
    main_channel_id = main_channel_result.scalar()

    if main_channel_id:
        # ‚úÖ –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª, –ø–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        owner_result = await session.execute(select(Channel.user_id).where(Channel.chat_id == int(main_channel_id)))
        owner_id = owner_result.scalar()
        
        if owner_id:
            print(f"üîÑ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ user_id={owner_id}")
            stats_user_id = owner_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞
        else:
            print(f"‚ö† –ì–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id={user_id}")
            stats_user_id = user_id
    else:
        print(f"‚ö† –ì–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id={user_id}")
        stats_user_id = user_id  # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–Ω–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # üî• –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await orm_get_statistics(session, stats_user_id)

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ == 0, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if stats.get("translated_messages", 0) == 0 and stats.get("total_words", 0) == 0 and stats.get("total_characters", 0) == 0:
        await callback.answer("‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞!", show_alert=True)
        return

    # ‚úÖ –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    await callback.message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üì© <b>–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:</b> <b>{stats.get('translated_messages')}</b>\n"
        f"üìù <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:</b> <b>{stats.get('total_words')}</b>\n"
        f"üî† <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤:</b> <b>{stats.get('total_characters')}</b>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")]
        ])
    )



# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîπ –í—ã–±—Ä–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª"
@router.callback_query(F.data == "select_main_channel")
async def select_main_channel(callback: types.CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id 
    user_id = int(user_id)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ int –ø–µ—Ä–µ–¥ SQL-–∑–∞–ø—Ä–æ—Å–æ–º
    channels = await orm_get_all_channels(session, user_id)

    if not channels:
        await callback.answer("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.", show_alert=True)
        return

    buttons = [
        [InlineKeyboardButton(text=f"üèÜ {channel.name}", callback_data=f"set_main_{channel.chat_id}")]
        for channel in channels
    ]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")])  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"

    await callback.message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))



# ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≥–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª
@router.callback_query(F.data.startswith("set_main_"))
async def set_main_channel(callback: types.CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º user_id

    new_main_channel_id = int(callback.data.split("_")[2])

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –≥–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª –≤ –ë–î
    await orm_set_setting(session, "MAIN_CHANNEL_ID", str(new_main_channel_id), user_id)

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    channels = await orm_get_all_channels(session, user_id)  # <-- –£—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    main_channel_name = next((ch.name for ch in channels if ch.chat_id == new_main_channel_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å —É—á—ë—Ç–æ–º –Ω–æ–≤–æ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    await callback.message.edit_text(
        f"‚öô <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\nüèÜ –ì–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª: {main_channel_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä:",
        reply_markup=await get_settings_keyboard(session, user_id)  # <-- –ü–µ—Ä–µ–¥–∞—ë–º user_id
    )

    await callback.answer(f"‚úÖ –ì–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {main_channel_name}")








#############        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞         #############

# ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
class AddChannelState(StatesGroup):
    waiting_for_channel = State()   # –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    waiting_for_language = State()  # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —è–∑—ã–∫–∞


# ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"
@router.callback_query(F.data == "add_channel")
async def add_channel(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    user_id = callback.from_user.id  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ Telegram

    # ‚ùå –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    existing_user = await orm_get_user(session, user_id)
    if not existing_user:
        await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return

    # ‚úÖ –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
    await callback.message.answer("üì© –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.")
    await state.set_state(AddChannelState.waiting_for_channel)
    await state.update_data(user_id=user_id)  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ FSM



# ‚úÖ –õ–æ–≤–∏–º –í–°–ï –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ —Ç.–¥.)
@router.message(AddChannelState.waiting_for_channel)
async def get_channel_info(message: types.Message, state: FSMContext):    
    print(f"üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ {message.chat.id}")

    if not message.forward_from_chat:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞! –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        return

    chat_id = message.forward_from_chat.id
    chat_title = message.forward_from_chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

    if message.forward_from_chat.type != "channel":
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª! –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
        return

    print(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat_title} (ID: {chat_id})")

    await state.update_data(chat_id=chat_id, chat_title=chat_title)

    await message.answer(
        f"<b>–ö–∞–Ω–∞–ª: {chat_title}</b>\n\n ID: {chat_id} \n\n‚úÖ –ù–∞–π–¥–µ–Ω \n\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ –∫–∞–Ω–∞–ª–∞\n('EN', 'DE', 'FR', 'ES', 'RU', 'IT', 'NL', 'PL', 'PT', 'JA', 'ZH')",
        parse_mode="HTML"
    )

    await state.set_state(AddChannelState.waiting_for_language)



# ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —è–∑—ã–∫ –∫–∞–Ω–∞–ª–∞
@router.message(AddChannelState.waiting_for_language, F.text)
async def get_channel_language(message: types.Message, state: FSMContext, session: AsyncSession):
    language = message.text.strip().upper()

    if len(language) > 5:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —è–∑—ã–∫. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, EN, RU, FR")
        return

    data = await state.get_data()
    print(f"üìä FSM Data –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞: {data}")  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ

    user_id = data.get("user_id")
    chat_id = data.get("chat_id")
    chat_title = data.get("chat_title")

    if not user_id or not chat_id or not chat_title:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
    added = await orm_add_channel(session, user_id, chat_id, chat_title, language)

    if added:
        await message.answer(f"<b>–ö–∞–Ω–∞–ª: {chat_title}</b>\n\n ID: {chat_id}\n –Ø–∑—ã–∫: {language}\n\n ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω", reply_markup=get_admin_menu())
    else:
        await message.answer("‚ùå –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_admin_menu())

    await state.clear()






#############        –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞         #############
# ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("delete_"))
async def admin_delete_channel(callback: types.CallbackQuery, session: AsyncSession):
    channel_id = callback.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º ID —É–¥–∞–ª—è–µ–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞

    # üî• –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ –ë–î
    await orm_delete_channel(session, channel_id)

    # üîÑ –ü–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    channels = await orm_get_all_channels(session, callback.from_user.id)  

    if not channels:
        await callback.message.edit_text("‚ùå –í –±–∞–∑–µ –±–æ–ª—å—à–µ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]]))
        return

    # üîÅ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –∫–∞–Ω–∞–ª–∞–º–∏
    buttons = [
        [InlineKeyboardButton(text=f"‚ùå {channel.name}", callback_data=f"delete_{channel.chat_id}")]
        for channel in channels
    ]
    
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("üìå –í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)



# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@router.callback_query(F.data.startswith("delete_"))
async def confirm_delete_channel(callback: types.CallbackQuery, session: AsyncSession):
    chat_id = int(callback.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ callback_data
    deleted = await orm_delete_channel(session, chat_id)  # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ –ë–î

    if deleted:
        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels = await orm_get_all_channels(session)

        if not channels:
            await callback.message.edit_text("‚ùå –í –±–∞–∑–µ –±–æ–ª—å—à–µ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.")
            return

        # ‚úÖ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        buttons = (
            [InlineKeyboardButton(text=f"‚ùå {ch.name}", callback_data=f"delete_{ch.chat_id}")]
            for ch in channels
        )
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.answer("üìå –í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)  # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_back_button())

    await callback.answer()






# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
@router.callback_query(F.data == "admin_list_channels")
async def admin_list_channels(callback: types.CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º user_id

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º ID –≥–ª–∞–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    result = await session.execute(
        select(Settings.value).where(Settings.user_id == user_id, Settings.key == "MAIN_CHANNEL_ID")
    )
    main_channel_id = result.scalar()

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    channels = await orm_get_all_channels(session, user_id)

    if not channels:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.", show_alert=True)
        return

    # ‚úÖ –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –∫–æ—Ä–æ–Ω–æ–π –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ —è–∑—ã–∫–æ–º
    text = "üìã <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:</b>\n\n"
    for channel in channels:
        crown = "üëë" if str(channel.chat_id) == main_channel_id else "‚ñ´Ô∏è"
        text += f"{crown} <b>{channel.name}</b> ({channel.language})\n"

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    await callback.message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="go_back")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()  # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ Telegram







# ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@router.callback_query(F.data == "go_back")
async def go_back(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(
            "üîπ <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_menu()
        )
        await callback.answer()  # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Telegram
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '–ù–∞–∑–∞–¥': {e}")
